// Code generated by MockGen. DO NOT EDIT.
// Source: repo.go

// Package irss is a generated GoMock package.
package irss

import (
	context "context"
	reflect "reflect"

	model "github.com/anguloc/zet/internal/app/repo/zetdao/model"
	gomock "github.com/golang/mock/gomock"
)

// MockRepo is a mock of Repo interface.
type MockRepo struct {
	ctrl     *gomock.Controller
	recorder *MockRepoMockRecorder
}

// MockRepoMockRecorder is the mock recorder for MockRepo.
type MockRepoMockRecorder struct {
	mock *MockRepo
}

// NewMockRepo creates a new mock instance.
func NewMockRepo(ctrl *gomock.Controller) *MockRepo {
	mock := &MockRepo{ctrl: ctrl}
	mock.recorder = &MockRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepo) EXPECT() *MockRepoMockRecorder {
	return m.recorder
}

// BatchInsertRss mocks base method.
func (m *MockRepo) BatchInsertRss(ctx context.Context, values []*model.Rss) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertRss", ctx, values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsertRss indicates an expected call of BatchInsertRss.
func (mr *MockRepoMockRecorder) BatchInsertRss(ctx, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertRss", reflect.TypeOf((*MockRepo)(nil).BatchInsertRss), ctx, values)
}

// FindByMarkList mocks base method.
func (m *MockRepo) FindByMarkList(ctx context.Context, mark []string) ([]*model.Rss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMarkList", ctx, mark)
	ret0, _ := ret[0].([]*model.Rss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMarkList indicates an expected call of FindByMarkList.
func (mr *MockRepoMockRecorder) FindByMarkList(ctx, mark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMarkList", reflect.TypeOf((*MockRepo)(nil).FindByMarkList), ctx, mark)
}

// MockReader is a mock of Reader interface.
type MockReader struct {
	ctrl     *gomock.Controller
	recorder *MockReaderMockRecorder
}

// MockReaderMockRecorder is the mock recorder for MockReader.
type MockReaderMockRecorder struct {
	mock *MockReader
}

// NewMockReader creates a new mock instance.
func NewMockReader(ctrl *gomock.Controller) *MockReader {
	mock := &MockReader{ctrl: ctrl}
	mock.recorder = &MockReaderMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockReader) EXPECT() *MockReaderMockRecorder {
	return m.recorder
}

// FindByMarkList mocks base method.
func (m *MockReader) FindByMarkList(ctx context.Context, mark []string) ([]*model.Rss, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByMarkList", ctx, mark)
	ret0, _ := ret[0].([]*model.Rss)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByMarkList indicates an expected call of FindByMarkList.
func (mr *MockReaderMockRecorder) FindByMarkList(ctx, mark interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByMarkList", reflect.TypeOf((*MockReader)(nil).FindByMarkList), ctx, mark)
}

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// BatchInsertRss mocks base method.
func (m *MockWriter) BatchInsertRss(ctx context.Context, values []*model.Rss) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchInsertRss", ctx, values)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BatchInsertRss indicates an expected call of BatchInsertRss.
func (mr *MockWriterMockRecorder) BatchInsertRss(ctx, values interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchInsertRss", reflect.TypeOf((*MockWriter)(nil).BatchInsertRss), ctx, values)
}
