// Code generated by MockGen. DO NOT EDIT.
// Source: parse.go

// Package parse is a generated GoMock package.
package parse

import (
	context "context"
	reflect "reflect"

	data "github.com/anguloc/zet/internal/app/rss/data"
	gomock "github.com/golang/mock/gomock"
)

// MockIParse is a mock of IParse interface.
type MockIParse struct {
	ctrl     *gomock.Controller
	recorder *MockIParseMockRecorder
}

// MockIParseMockRecorder is the mock recorder for MockIParse.
type MockIParseMockRecorder struct {
	mock *MockIParse
}

// NewMockIParse creates a new mock instance.
func NewMockIParse(ctrl *gomock.Controller) *MockIParse {
	mock := &MockIParse{ctrl: ctrl}
	mock.recorder = &MockIParseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockIParse) EXPECT() *MockIParseMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockIParse) Run(ctx context.Context) (*data.List, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Run", ctx)
	ret0, _ := ret[0].(*data.List)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Run indicates an expected call of Run.
func (mr *MockIParseMockRecorder) Run(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockIParse)(nil).Run), ctx)
}

// SetData mocks base method.
func (m *MockIParse) SetData(data []byte) IParse {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetData", data)
	ret0, _ := ret[0].(IParse)
	return ret0
}

// SetData indicates an expected call of SetData.
func (mr *MockIParseMockRecorder) SetData(data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetData", reflect.TypeOf((*MockIParse)(nil).SetData), data)
}
